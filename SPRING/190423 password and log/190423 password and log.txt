1. header.jsp 에 <li><a href="testView.do">패스워드 암호화처리</a></li> 추가

2. TestController 에 moveCryptoPage() 메소드 추가

3. views/test/testCrypto.jsp 생성 및 작성

4. pom.xml에 스프링 시큐리티
		<!-- 스프링 시큐리티 -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>4.2.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>4.2.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>4.2.3.RELEASE</version>
		</dependency>
5. 스프링 시큐리티 설정을 위해 xml파일 하나 만듦
  ->appServlet 폴더 마우스 오른쪽 New->Spring Bean Configuration ->spring-security.xml->next
  ->beans, security 체크 -> select desired XSD에 버전 판단이 안되면 첫번째꺼 체크 ->finish
  - 혹시라도 체크 못하면 Namespaces 에서 다시 체크할 수 있음
  - Namespaces에 목록이 aop~util까지 15개정도면 다 다운된거임. 6개정도면 제대로 다운이 안된거라 다시 다운받아야 함.

  ->beans ->마우스 오른쪽 insert bean element->id : bcryptPasswordEncoder
 					  class: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder

  ->web.xml에 param-value 안에 /WEB-INF/spring/appServlet/spring-security.xml 추가 아래와 같이 추가되면 됨
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:root-context.xml
			<!-- 스프링 시큐리티 설정 추가 -->
			/WEB-INF/spring/appServlet/spring-security.xml
		</param-value>
	</context-param>

6. TestController에 testBcryptPassword() 메소드 생성
  - 상단 변수 선언에 작성
	@Autowired
	BCryptPasswordEncoder bcryptPasswordEncoder;  변수명은 spring-security.xml 안 bean의 id값
  -> testBcryptPassword() 작성

7. password가 60바이트로 들어가기 때문에 DB에서 아래와 같이 작성
alter table member
modify (userpwd varchar2(100));  

alter table users
modify (userpwd varchar2(100));

8. MemberController.java 에서 minsert.do 작업 전
  ->MemberContoller.java 상단에 아래내용 붙여넣기
  	@Autowired
	BCryptPasswordEncoder bcryptPasswordEncoder;
  ->minsert.do 안에 아래 내용 추가
		//패스워드 암호화처리 
		member.setUserpwd(bcryptPasswordEncoder.encode(member.getUserpwd()));

9. memberUpdatePage.jsp 에서
암호, 암호확인 value를 비움   value=""

10. member mapper에서 패스워드 관련 주석처리 selectLogin 
	select * from member 
				where userid = #{userid} <!-- and userpwd = #{userpwd} -->

11. memberdao selectLogin 수정
  ->memberdao 상단에  아래와 같이 변수 추가
	 @Autowired
	BCryptPasswordEncoder bcryptPasswordEncoder;

12. pom.xml에 <!-- Logging --> 아래에 slf4j 등 라이브러리 있는지 확인(기본으로 제공됨)

13. MemberContoller 상단에 변수 추가
private static final Logger logger = LoggerFactory.getLogger(MemberController.class);
  - Logger 임포트 시 org.slf4j 로 임포트
  -> minsert.do 에 syso 지우고 아래 두줄 추가
    logger.info("member : " + member);
    logger.info("프로필 사진 : " + mphoto);

14. log4j.xml 안에 param value %c 앞뒤로 수정(아래와 같이)
<param name="ConversionPattern" value="%-5p: [%c{1}] - %m%n" />
  - %c 안에 console창에 보여지는 이름만 보여지는게 1, 상위 패키지 보여지려면 2,3....으로 작성하면 됨.

15. log4j.xml 안에 로그를 파일에 기록저장하는 appender 작성
  -> src/main/resources 아래에 logs 폴더 생성 -> new file -> system.log 파일
  -> system.log 파일이 있는 경로 쭉 복사하여 param name="file" value="경로붙여넣기\system.log"
  - appender는 아래와 같이 작성
	<!-- 로그를 파일에 기록 저장하는 appender -->
	<appender name="fileLogger" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="D:\GitHub\kh\SPRING\framework_workspace\first\src\main\resources\logs\system.log" />
		<param name="Append" value="true"/>
		<param name="DatePattern" value="yyyy-MM-dd"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{HH:mm:ss}][%-5p][%F:%L]: - %m%n" />
		</layout>
	</appender>


  - 스프링 부분 출력하기 싫으면 org.springframework 관련된 logger를 주석처리

16. MemberController.java에 logger.info("login.do run"); 과 같이 메소드 run 확인할 수 있게 logger.info 복사 붙여넣기

17. log4j.xml 안에 경로를 \를 \\로 변경(아래와 같이)
<param name="file" value="D:\\GitHub\\kh\\SPRING\\framework_workspace\\first\\src\\main\\resources\\logs\\system.log" />


D:\\GitHub\\kh\\SPRING\\framework_workspace\\first\\src\\main\\resources\\logs\\system.log