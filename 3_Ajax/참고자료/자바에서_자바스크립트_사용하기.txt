java에서 javascript 사용하기
#java #javascript #nashorn #rhino
jaeyojaeyo  folder_open개발  2015.08.19 조회수 1228

Java에서는 ScriptEngine 이라는 클래스를 통해 스크립팅 기능을 기본적으로 제공하고 있다. (아마도 1.6부터 지원하는 것으로 알고 있다)
스크립팅 기능을 위해 가장 많이 사용하는 언어는 Javascript이며 이를 위해 jdk에서 기본적으로 javascript engine을 내장하고 있다. 아래와 같은 코드를 통해 javascript engine을 호출할 수 있다.


1
2
ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName
("JavaScript");
scriptEngine.eval("print('hello, world');");

Oracle jdk 에서만 실행 가능하다던가 하는 호환성 문제를 걱정했었는데 "write once, run anywhere"의 java답게 대부분의 메이저 java 구현체에서 각각 스크립트 엔진을 제공하고 있는 듯 하다. 1.6, 1.7버전 기준 oracle jdk, open jdk, hpux jdk, ibm aix jdk solaris jdk 에서 전부 제공하고 있다.

javascript에서 java 객체 사용하기
javascript에서 java 객체를 호출하여 사용하는 방법은 크게 두 가지로 나뉜다. Bindings 클래스를 통해 ScriptEngine에다가 객체를 직접 전달하는 방법과 스크립트 상에서 직접 java 클래스를 호출하는 방법이 있다.
1. Bindings 클래스를 통해 java 객체 사용하기
스크립트 상에서 사용할 java 객체를 아래와 같이 Bindings 클래스를 통해 ScriptEngine으로 전달한다.


1
2
3
4
Bindings bindings = new SimpleBindings();
bindings.put("yourClass", new YourClass());
ScriptEngine scriptEngine = new ScriptEngineManager().getManagerByName
("JavaScript");
scriptEngine.eval("yourClass.anyMethod();", bindings);
YourClass 객체는 yourClass 라는 변수에 매핑되어 스크립트 상에서 호출 가능한다.

2. 스크립트 상에서 직접 java 클래스 호출하기
안타깝게도 이 방법은 ScriptEngine 구현체에 따라서 사용법이 다르다. Oracle jdk 기준으로 1.6, 1.7에 기본으로 탑재되어 있는 ScriptEngine 구현체는 Rhino이며, 1.8부터는 Nashorn이 탑재되어 있다.
각각의 구현체에서 java 클래스를 사용하는 방법은 아래와 같다.


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
// accessing java packages and classes from script
//Rhino
var Vector = java.util.Vector;
var JFrame = Packages.javax.swing.JFrame;
//Nashorn
var Vector = Java.type("java.util.Vector");
var JFrame = Java.type("javax.swing.JFrame");
//creating java arrays from script
//Rhino
var Array = java.lang.reflect.Array;
var intClass = java.lang.Integer.TYPE;
var array = Array.newInstance(intClass, 8);
//Nashorn
var IntArray = Java.type("int[]");
var array = new IntArray(8);
//Class object and .classs property
//Rhino
var array = java.lang.reflect.Arrray;
var strArray = Array.newInstance(java.lang.String, 10);
//Nashorn
var Array = Java.type("java.lang.reflect.Array");
var JString = Java.type("java.lang.String");
//implementing java interface
//works both in rhino and nashorn
var runnable = new java.lang.Runnable(){
  run: function(){
      java.lang.System.out.println("I am run!");
  }  
};

rhino engine 기준으로 javascript에서 java로 변수를 넘길 때 json 객체는 Map으로, 
function은 Runnable 혹은 Function 으로 자동 변환되도록 할 수 있다.


class TestUtil {
    public void testMethod(Function run){
        Context context = Context.enter();
        ScriptableObject scope = context.initSafeStandardObjects();
        Scriptable that = context.newObject(scope);
        run.call(context, that, scope, new Object[]{ "hello, world" });
    } //testMethod
} //class
...
Bindings bindings = new SimpleBindings();
bindings.put("testUtil", new TestUtil());
ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName
("rhino");
scriptEngine.eval("testUtil.testMethod(function(msg){ print(msg); });", 
bindings);

ScriptEngine 구현체(Rhino / Nashorn)를 직접 지정하여 사용하기
사실 이 포스트를 작성한 이유가 이것 때문이다. 엔터프라이즈 환경에서 OS를 제한할 수 없는 환경이라면 내가 작성한 java 코드가 어떤 java 구현체에서 구동될 지, ScriptEngine 구현체는 Rhino로 돌아갈지 Nashorn에서 돌아갈지 알 수가 없다. 문제는 어떤 ScriptEngine 구현체냐에 따라서 사용되는 코드 역시 수정이 필요하다는 점이다.
예를 들어 javascript 에서 java 객체의 메소드 호출시에 json 객체를 넘긴다고 가정해보자. java 에서 해당 json 객체를 받았을 때에는 java에서 사용 가능한, json 객체를 래핑한 클래스가 넘어오는데 이 클래스가 아래와 같이 구현체마다 다르다.



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
public class Test3 {
    public class TestUtil {
        public void testMethod(Object args){
            System.out.println(args.getClass());
        } //testMethod
    } //class
    public Test3() throws Exception {
        Bindings bindings = new SimpleBindings();
        bindings.put("testUtil", new TestUtil());
        String script = "testUtil.testMethod({ testKey: 'testValue' });"
;
        ScriptEngine scriptEngine = new ScriptEngineManager().getEngineB
yName("JavaScript");
        scriptEngine.eval("testUtil.testMethod({ testKey: 'testValue' }
);", bindings);
        // in Rhino, class sun.org.mozilla.javascript.internal.NativeObj
ect
        // in Nashorn, class jdk.nashorn.internal.scripts.JO4
        
        scriptEngine.eval("testUtil.testMethod(function(){ print('hello'
); });", bindings);
        // in Rhino, class sun.org.mozilla.javascript.internal.NativeObj
ect
        // in Nashorn, class jdk.nashorn.internal.scripts.JO4
    }
    public static void main(String[] args) throws Exception {
        new Test3();
    } //main
} // class

해서, ScriptEngine 구현체를 직접 지정하여 사용할 수 있는 방법이 필요해졌다.
Rhino 사용하기
1. zip 형태의 Rhino 바이너리 다운로드하여 압축 해제 ( https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Download_Rhino )
2. JSR-223 다운로드 ( svn checkout https://svn.java.net/svn/scripting~svn )
3. cd scripting~svn/trunk/engines/javascript/lib
4. 1번에서 압축 해제한 Rhino 폴더에서 js.jar 파일을 찾아 덮어쓰기
5. cd ../make
6. ant clean all
7. ../build/js-engine.jar 와 js.jar를 클래스패스로 복사
8. 이제 아래와 같은 코드를 통해 Rhino ScriptEngine을 사용할 수 있다.


1
2
3
ScriptEngine scriptEngine = new RhinoScriptEngineFactory().getScriptEngin
e();
//or
ScriptEngine scriptEngine = new RhinoScriptEngineFactory().getScriptEngin
e();
