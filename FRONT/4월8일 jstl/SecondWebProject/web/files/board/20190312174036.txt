JSON.parse 함수(JavaScript)

 
JSON(JavaScript Object Notation) 문자열을 개체로 변환합니다.
구문
JSON.parse(text [, reviver])
매개 변수
text
필수 요소.유효한 JSON 문자열입니다.
reviver
선택 사항입니다.결과를 변환하는 함수입니다.이 함수는 개체의 각 멤버에 대해 호출됩니다.멤버에 중첩된 개체가 포함되어 있으면 중첩된 개체가 부모 개체보다 먼저 변환됩니다.멤버 각각에 대해 다음이 발생합니다.
reviver에서 유효한 값을 반환하면 멤버 값은 변환된 값으로 바뀝니다.
reviver에서 수신한 값과 동일한 값을 반환하면 멤버 값은 수정되지 않습니다.
reviver가 null 또는 undefined를 반환하면 멤버가 삭제됩니다.
반환 값
개체 또는 배열입니다.
예외
이 함수로 인해 JavaScript 파서 오류("SCRIPT1014: 잘못된 문자입니다.")가 발생하는 경우 입력 텍스트가 JSON 구문을 따르지 않은 것입니다.오류를 수정하려면 다음 중 하나를 수행합니다.
text 인수를 수정하여 JSON 구문을 따르도록 합니다.자세한 내용은 JSON 개체의 BNF 구문 표기법을 참조하세요.
예를 들어, 응답이 순수 JSON이 아닌 JSONP 형식으로 된 경우 응답 개체에서 다음 코드를 사용해 보십시오.
JavaScript
var fixedResponse = response.responseText.replace(/\\'/g, "'");
var jsonObj = JSON.parse(fixedResponse);
text 인수가 JSON.stringify와 같은 JSON 규격 구현으로 serialize되는지 확인합니다.
구문 오류 확인에 유용한 JSLint와 같은 JSON 유효성 검사기에서 text 인수를 실행합니다.
Exception	Condition
다음 예제에서는 JSON.parse를 사용하여 JSON 문자열을 개체로 변환합니다.
JavaScript
var jsontext = '{"firstname":"Jesper","surname":"Aaberg","phone":["555-0100","555-0120"]}';
var contact = JSON.parse(jsontext);
document.write(contact.surname + ", " + contact.firstname);

// Output: Aaberg, Jesper
다음 예제에서는 JSON.stringify를 사용하여 배열을 JSON 문자열로 변환한 다음 JSON.parse를 사용하여 문자열을 다시 배열로 변환합니다.
JavaScript
var arr = ["a", "b", "c"];
var str = JSON.stringify(arr);
document.write(str);
document.write ("<br/>");

var newArr = JSON.parse(str);

while (newArr.length > 0) {
    document.write(newArr.pop() + "<br/>");
}


// Output:
// ["a","b","c"]
// c
// b
// a
reviver 함수는 ISO(International Organization for Standardization) 날짜 문자열의 JSON 표현을 UTC(협정 세계시) 형식 Date 개체로 변환하는 경우에 사용됩니다.이 예제에서는 JSON.parse를 사용하여 ISO 형식의 날짜 문자열을 deserialize합니다. dateReviver 함수는 ISO 날짜 문자열처럼 형식이 지정된 멤버의 Date 개체를 반환합니다.
JavaScript
var jsontext = '{ "hiredate": "2008-01-01T12:00:00Z", "birthdate": "2008-12-25T12:00:00Z" }';
var dates = JSON.parse(jsontext, dateReviver);
document.write(dates.birthdate.toUTCString());

function dateReviver(key, value) {
    var a;
    if (typeof value === 'string') {
        a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
        if (a) {
            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
        }
    }
    return value;
};

// Output:
// Thu, 25 Dec 2008 12:00:00 UTC

JSON.stringify 함수(JavaScript)

 
JavaScript 값을 JSON(JavaScript Object Notation) 문자열로 변환합니다.
구문

JSON.stringify(
value [, replacer] [, space])
매개 변수
value
필수 요소.JavaScript 값은 일반적으로 변환할 개체 또는 배열입니다.
replacer
선택 사항입니다.결과를 변환하는 함수 또는 배열입니다.
replacer가 함수이면 JSON.stringify는 키와 각 멤버의 값을 전달하여 함수를 호출합니다.반환 값은 원래 값 대신 사용됩니다.함수가 undefined를 반환하면 멤버가 제외됩니다.루트 개체의 키는 빈 문자열인 ""입니다.
replacer가 배열이면 배열에 키 값이 있는 멤버만 변환됩니다.멤버가 변환되는 순서는 배열의 키 순서와 같습니다. replacer 배열은 value 인수도 배열인 경우 무시됩니다.
space
선택 사항입니다.읽기 쉽도록 들여쓰기, 공백, 줄 바꿈 문자를 반환 값 JSON 텍스트에 추가합니다.
space가 생략되면 반환 값 텍스트가 추가 공백 없이 생성됩니다.
space가 숫자이면 반환 값 텍스트가 각 수준의 지정된 공백 수로 들여쓰기됩니다. space가 10보다 크면 텍스트가 10칸 들여쓰기됩니다.
space가 '\t'와 같이 빈 문자열이 아니면 반환 값 텍스트가 각 수준에서 문자열의 문자로 들여쓰기됩니다.
space가 10자보다 긴 문자열이면 처음 10자가 사용됩니다.
반환 값
JSON 텍스트를 포함하는 문자열입니다.
예외
Exception	Condition
예외
조건
치환 인수가 잘못되었습니다.
replacer 인수는 함수 또는 배열이 아닙니다.
값 인수에 순환 참조를 사용하는 것은 지원되지 않습니다.
value 인수는 순환 참조를 포함합니다.
설명
value에 toJSON 메서드가 있으면 JSON.stringify 함수는 해당 메서드의 반환 값을 사용합니다. toJSON 메서드의 반환 값이 undefined이면 멤버가 변환되지 않습니다.이 경우 개체가 JSON 표현을 결정할 수 있습니다.
undefined와 같은 JSON 표현이 없는 값은 변환되지 않습니다.이러한 값은 개체에서 삭제됩니다.배열에서 이러한 값은 null로 바뀝니다.
문자열 값은 큰따옴표로 시작하고 끝납니다.백슬래시로 이스케이프되어야 하는 문자를 제외한 모든 유니코드 문자는 큰따옴표로 묶을 수 있습니다.다음 문자는 백슬래시 다음에 와야 합니다.
큰따옴표(")
백슬래시(\)
백스페이스(b)
용지 공급(f)
줄 바꿈(n)
캐리지 리턴(r)
가로 탭(t)
네 자리 16진수(uhhhh)
실행 순서
Serialization 프로세스 중 toJSON 메서드가 value 인수에 있으면 JSON.stringify는 먼저 toJSON 메서드를 호출합니다.메서드가 없으면 원래 값이 사용됩니다.다음으로 replacer 인수가 제공되면 값(원래 값 또는 toJSON 반환 값)은 replacer 인수의 반환 값으로 바뀝니다.마지막으로 최종 JSON 텍스트를 생성하기 위해 선택적인 space 인수를 기반으로 하는 값에 공백이 추가됩니다.
이 예제에서는 JSON.stringify를 사용하여 contact 개체를 JSON 텍스트로 변환합니다. memberfilter 배열이 정의되어 surname 및 phone 멤버만 변환됩니다. firstname 멤버는 생략됩니다.
JavaScript
var contact = new Object();
contact.firstname = "Jesper";
contact.surname = "Aaberg";
contact.phone = ["555-0100", "555-0120"];

var memberfilter = new Array();
memberfilter[0] = "surname";
memberfilter[1] = "phone";
var jsonText = JSON.stringify(contact, memberfilter, "\t");
document.write(jsonText);
// Output: 
// { "surname": "Aaberg", "phone": [ "555-0100", "555-0120" ] }
이 예제에서는 배열이 있는 JSON.stringify를 사용합니다. replaceToUpper 함수는 배열의 모든 문자열을 대문자로 변환합니다.
JavaScript
var continents = new Array();
continents[0] = "Europe";
continents[1] = "Asia";
continents[2] = "Australia";
continents[3] = "Antarctica";
continents[4] = "North America";
continents[5] = "South America";
continents[6] = "Africa";

var jsonText = JSON.stringify(continents, replaceToUpper);

function replaceToUpper(key, value) {
    return value.toString().toUpperCase();
}

//Output:
// "EUROPE,ASIA,AUSTRALIA,ANTARCTICA,NORTH AMERICA,SOUTH AMERICA,AFRICA"

이 예제에서는 toJSON 메서드를 사용하여 문자열 값을 대문자로 변환합니다.
JavaScript
var contact = new Object(); 
contact.firstname = "Jesper";
contact.surname = "Aaberg";
contact.phone = ["555-0100", "555-0120"];

contact.toJSON = function(key)
 {
    var replacement = new Object();
    for (var val in this)
    {
        if (typeof (this[val]) === 'string')
            replacement[val] = this[val].toUpperCase();
        else
            replacement[val] = this[val]
    }
    return replacement;
};

var jsonText = JSON.stringify(contact);
document.write(jsonText);

// Output:
{"firstname":"JESPER","surname":"AABERG","phone":["555-0100","555-0120"]}



'{"firstname":"JESPER","surname":"AABERG","phone":["555-0100","555-0120"]}'
*/

-----------------------------------------------------------------------------------
toJSON 메서드(Date)(JavaScript)

 
JSON.stringify 메서드에서 JSON(JavaScript Object Notation) serialization에 대한 개체 데이터의 변환을 허용하는 데 사용합니다.
구문

objectname.toJSON()
매개 변수
objectname
필수 요소.JSON serialization이 필요한 개체입니다.
설명
toJSON 메서드는 JSON.stringify 함수에서 사용됩니다. JSON.stringify는 JavaScript 값을 JSON 텍스트로 serialize합니다. toJSON 메서드를 JSON.stringify에 지정하면 JSON.stringify를 호출할 때 toJSON 메서드가 호출됩니다.
toJSON 메서드는 Date JavaScript 개체의 기본 제공 멤버입니다.접미사 Z로 식별된 UTC 표준 시간대의 ISO 형식 날짜 문자열을 반환합니다.
Date 형식에 대한 toJSON 메서드를 재정의하거나 다른 개체 형식에 대해 toJSON 메서드를 정의하여 JSON serialization 전에 특정 개체 형식의 데이터를 변환할 수 있습니다.
다음 예제에서는 toJSON 메서드를 사용하여 문자열 멤버 값을 대문자로 serialize합니다. JSON.stringify를 호출하면 toJSON 메서드가 호출됩니다.
JavaScript
var contact = new Object();
contact.firstname = "Jesper";
contact.surname = "Aaberg";
contact.phone = ["555-0100", "555-0120"];

contact.toJSON = function(key)
 {
    var replacement = new Object();
    for (var val in this)
    {
        if (typeof (this[val]) === 'string')
            replacement[val] = this[val].toUpperCase();
        else
            replacement[val] = this[val]
    }
    return replacement;
};

var jsonText = JSON.stringify(contact);

/* The value of jsonText is:
'{"firstname":"JESPER","surname":"AABERG","phone":["555-0100","555-0120"]}'
*/
다음 예제에서는 Date 개체의 기본 제공 멤버인 toJSON 메서드의 사용법을 보여 줍니다.
JavaScript
var dt = new Date('8/24/2009');
dt.setUTCHours(7, 30, 0);
var jsonText = JSON.stringify(dt);

/* The value of jsonText is:
'"2009-08-24T07:30:00Z"'
*/
